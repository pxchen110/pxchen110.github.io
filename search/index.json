[{"content":"在冰川赤阪神社，用生肖籤為這趟旅行畫下句點。\n東京第二周遇上颱風登入，當天早上早已懷疑人生一百次，後悔為何要換飯店😭原想等下午風雨漸消後再移動，但看新聞顯示越晚影響越大，便硬著頭皮退房出發。到大廳發現大家都站在飯店內不出去，抬頭一看外面風雨浮誇到不能輕易走出去的程度。別無選擇，我把身上僅有的薄外套穿上，將背包換至胸前，以戰鬥姿態和一群人同時衝出飯店，路上雨傘幾度被吹到開花，變成蓮蓬頭直接洗臉，終於加速抵達地鐵站，看見入口聚集同樣狀態狼狽的人群(日本沒有颱風假!!)，此時膝蓋以下的褲管全濕，行李箱也進水啦。\n從新宿搭大江戶線到上野轉乘日比谷線後達人形町站，這間apa飯店地處日本生活住宅區，路上有許多附上小孩座位的腳踏車，以及揹著書包上學的小朋友身影；飯店附近機能良好，餐廳居酒屋密集程度高，很適合下班後約來這邊小酌。\n寄放行李後已接近中午，決定前往日本橋站的室內百貨行程，還好百貨公司沒放假，不然就要關在飯店一整天。午餐吃了花山烏冬的寬版冰烏龍麵搭配釜飯套餐，烏龍麵有兩種沾醬可以選擇，我個人比較喜歡醬油的，搭配蔥花和姜泥味道清爽，另一個胡麻醬相當天然濃郁，甚至有點苦。\n(題外話)我很困惑碳水加碳水的組合，不僅隔壁男生跟我點相同套餐，還免費加麵一次，連電視節目也介紹卡車司機喜歡蕎麥麵搭配炸一堆天婦羅跟豬排丼，對於日本的神奇印象（煎餃套餐配白飯和拉麵）又加深了。\n在日本橋三越購買精緻的伴手禮並辦好退稅後，跑回飯店附近排隊等待泡芙，這家店也是滑社交媒體看到的，果然開店前20分鐘早已大排長龍，還好傍晚風雨漸消，跟著日本人一起等待出爐，一邊欣賞櫥窗內的精美的日式洋菓，有種我們這一家的日常既視感。\n真的\u0026hellip;很好吃，人形町美食眾多，我還吃了一碗味道印象深刻的薑汁鹽味拉麵。附近則有高級壽喜燒：人形町金半的本店\n第二個周末颱風剛出境天氣稍有寒意，為了避開人潮，7.30便抵達明治神宮參拜，穿越第一鳥居(進入神界後)氣氛逐漸莊嚴靜謐，漫步在與世隔絕的都市森林，眾樹圍繞下霧氣氤氳，可謂秋高氣爽(這才是我想要的秋涼時節)。當天剛好有日式婚禮，，這是我第一次近距離觀察日式婚服，男生腰帶上的兩顆毛球相當顯眼，女生的白無垢好精緻漂亮:紅白相襯的布料層層堆疊，繡上精美圖案，唯獨後面那一塊綁帶超級凸，好像一個頂著一個駝峰。若能在天皇夫婦種植的百年夫婦楠前面，得到親友的祝福，一定很幸福吧!\n參拜完後前往上元代代木吃預約芭菲，店內蠻多一人過來享受的客人，很符合蔣方舟描述的，東京是可以容下一個人拼命吃飯的地方，當月的甜點以葡萄為主調，葡萄冰淇淋為核心、伯爵冰淇淋為副調，佐以奶酪與橙皮檸檬醬，外觀以店內烘烤的奶油小餅乾，小鳶尾花，達克瓦茲皮以及糖片做點綴，不管視覺和味覺都很賞心悅目，當季的麝香葡萄也很甜美好吃，至福的瞬間。\n生活即是藝術，日本的美感真的融入文化，不僅是文宣設計，連甜點裝飾都別具巧思\n東京的最後一晚選擇到連鎖居酒屋鳥貴族展開一人慰勞檢討會，點了兩種不同調味+部位組合的雞肉串，鐵板山藥泥，以及無酒精可爾必斯，當所有菜色上桌一度懷疑自己不能吃完，還好沒再加菜給自己挖洞。一邊吃著料理一邊打日記，感覺心情放鬆，兩周回過神來一下子就結束，好像經歷了很多冒險又好像虛幻不實的經驗，彷彿掉落人生的吉光片羽，已經期待下次出行了。\n\u0026lt;後記\u0026gt; 收拾旅行途中的隨筆，發現自己挺擅長用文字展現話癆的一面，兩周日記加總大概有50K以上(?希望有機會能在整理這幾年的旅行日記出來，順便回味一下XD其實原本想帶著蔣方舟的書去當文青拍照，還好有先見之明，想起行李會被代購與自用品塞滿，最終上機過磅為22.7kg，真是差點就要超重。\n附錄上一些碎片：\n穿越冰川神社有名的釣籤，大概是願者上鉤的概念吧XD\n位於國會附近的日枝神社，側邊有個鳥居，稍微體驗京都稻荷神社千鳥居的風情。參拜完想鍛鍊可以跟我一樣走去冰川赤阪神社，保證爬坡到害怕XD\n","date":"2024-04-17T00:00:00Z","image":"https://pxchen110.github.io/post/travel-japan-tokyo-2024-4/20240417_img1.jpg","permalink":"https://pxchen110.github.io/p/%E6%9D%B1%E4%BA%AC%E7%8D%A8%E6%97%85%E7%B4%80%E8%A1%8C%E4%B9%8B%E5%9B%9B%E5%90%89%E5%85%89%E7%89%87%E7%BE%BD/","title":"東京獨旅紀行之四。吉光片羽"},{"content":"特別感謝國中朋友Amigo的共遊.___.\n(時間拉回到第一個周日)，和在日友人Amigo(以下又稱朋朋)見面，早上先獨自一人去世田谷區探險，第一次知道三茶是東京女子圖鑑，房仲說剛上京工作可以考慮的租屋處。三軒茶屋站內可見成群的家庭或學生，小巷內還有剛從居酒屋出來的人群，騎單車滿載的阿伯，充滿生活氣息。早餐吃了 blue bottle coffee 和(二度朝聖的)truffle bakery，松露麵包超級好吃，也幫朋朋代買幾個。\n搭乘東急世田谷線的福貓列車，貓咪外觀的車廂相當可愛，路面電車的風情之一就是能一瞥兩旁住宅區的風景，讓人想起挪威森林書中描寫電車駛過住宅街區的段落(雖然路線不同XD)，也偷偷想像屋內的人過著怎樣的生活?\n抵達豪德寺，滿滿的觀光客為了可愛招財貓而來，神社外擺放過於密集的祈福貓，很適合拍照，也有人秉持著威利在哪裡的玩心，將貓咪放在刁鑽的角度，像是屋簷內側?等奇特位置，享受了片刻的尋寶樂趣。沿著住宅區散步回車站，轉搭小田急線前往下北沢，才發現今天有神社祭典，真是幸運。\n和Amigo會合並吃午餐後，一路跟隨神轎的隊伍前往神社，還記得當天晴空萬里（九月仍然有32度的熾熱），由於人潮眾多不方便撐傘，就頂著大太陽玩樂，也近距離參觀神轎的精美作工，那固定木樁的粗繩比我手臂還粗，尺寸驚人，消耗體力後的鬆餅下午茶格外美味，一路上閒晃聊天，彷彿回到沒有太多顧慮和世俗壓力的學生時代，享受著純粹的開心。\n總共有8家神社參與的樣子，神轎的樣貌與裝飾都有所不同，很棒的體驗。\n星期二和在日朋朋Amigo約在新宿JR南口匯合，原本想飯店在新宿車站附近，可以慢悠悠地晃過去集合，但由於本人連北車地下道都會迷路，如果貿然進入新宿地下迷宮，一定會被吞進異世界，於是多花一點時間，從飯店走平面到集合點。由於兩人都是早到派，發車前半小時已經抵達月台，發現都穿了當季流行的公装褲並帶上我推小娃娃，默契++。事前預訂好富士回游車票，好處是一定有位子，但富士山的能見度就要看運氣，由於颱風接近，富士預報的狀況不太理想，希望到當地能見到完整的景色。\n從下吉田站開始旅程，前往淺間神社與忠靈塔欣賞風景，我們覺得年輕人就多爬樓梯快速通關，誰知爬到半路體力太差，幾次停頓才終於抵達最上層，富士山一開始被大片雲遮住，和其他遊客在那等了一會，突然一瞬間山頂的雲霧散去，大家非常有默契的起身拍照\n下山後我們改走小路探險，途經當地人的菜園，看到可愛的小茄子與漂亮的都府車牌，備感新奇，找到一間養馬的神社，一旁裝飾到一半的道具與宣傳單顯示下周要舉辦祭典，聽說還有騎馬射箭的儀式，感覺很有趣，從神社正門出來就是下吉田懷舊商店街。\n那裏帶有可愛的昭和風色調，淺灰色、天空藍與白色和富士山十分相襯，街上擺著請勿停留馬路中間拍照的招牌，甚至是中文寫得，看來IG打卡點的宣傳力量大，這時富士山又被蓋住無法欣賞，於是我們試圖從商店街宣傳單推薦的餐廳尋找午餐地點，但那張宣傳單有點雷，部分已歇業或公休，最終找到一家叫M2的喫茶店，門口牌子顯示準備中，往店裡窺探也相當昏暗，正當我們準備放棄時，突然有一個當地人很自然的走進去，我們趁這時見到染著大紅頭髮的的老闆，成功入座點餐。\n午餐的漢堡排定食在飢餓的加成下相當美味，手工捏製的粗絞肉漢堡排配上味噌醬汁與生菜，搭配香軟的日本米與鹹度適中的味增湯，令人滿足感謝招待；店內氣氛放鬆，許多熟客進來不用多說便坐在老位子看書，或聽廣播享受飲料；結帳時阿嬤還跑去廚房拿巧克力給我們，就像孫女一樣被神秘款待。飯後散步至大月站搭車前往河口湖。\n到河口湖天氣非常晴朗但富士山還沒出來，走去天上山公園纜車的路上差點熱昏，纜車上升途中可以眺望整個河口湖的美景，觀景平台的故事設定和鬼灯那隻兔子獄官一樣，可以看到那隻被塗味增的壞心狸貓XD\n從河口湖上升至山頂的纜車，天気はとても良い\n我們爬上神秘小山，抵達武田信玄戰場，甚至沿著超級難走的路(只能找樹根與石頭縫隙落腳) 爬上煙罕至的小神社，運動量直接達標XD下山後直接跑去買富士山限定可樂與刨冰消暑。\n回到車站附近，幸運地在lawson前看到露出全貌的富士山，配上佐以當季水果-桃子和麝香葡萄-的富士山布丁，有得看又有得吃，離開跟朋友去買信玄餅伴手禮，轉頭剛好看到富士山跟和河口湖車站兩者共構的美景，真的不虛此行。\n旅行の最後に、窓から富士山を見えた！\n星期三是鎌倉江之島旅行，由於颱風生成並朝東京前進，內心有點忐忑江之島的天氣。新宿購買小田急鎌倉一日券後，先抵達藤沢站再換乘江之島電鐵。\n將之導電鐵的車廂十分復古可愛，大概十來分鐘抵達通往江之島的陸橋入口，當天橋上的風雨頗大，彷彿是為了我先做颱風天扛行李換飯店的演習，我們兩人死命抓著傘防止開花，一邊艱難前進XD登島後眼看雨勢頗大，果斷購買江之島電扶梯門票以節省體力，電梯一共分三層，每層都會抵達江之島三大社(邊津宮、中津宮、奧津宮)的其中一間，電扶梯只提供往上運輸，下來只有樓梯可選擇。\n這次來江之島的目的便是打卡 she\u0026rsquo;s letter mv的拍攝場景，感謝 Amigo 答應與我巡禮一圈，包含奧津宮，元祖招牌商店街，也吃了女夫饅頭跟富士見亭。巡禮過程天氣也從烏雲密布到出大太陽啦!(ps.支線任務還有參觀植物園，吃章魚仙貝，以及江之島燈塔徘徊)\n\u0026ldquo;僕らは大切な人から順番に 傷つけてしまっては 後悔を重ねていく それでも愛したり 愛されたいと願っている あなたを守れるほどの 優しさを探している\u0026rdquo; \u0026ndash; she\u0026rsquo;s 兩人約會共同參拜的神社奧津宮，有趣的知識：這裡跟台灣人說情侶不要一起去呂洞賓廟有異曲同工之妙，江之島也有戀人分手聖地的傳說\u0026hellip;\u0026hellip;\n原本想跟主角一樣坐在外面，在養樂多排陽傘下吃刨冰，但外面風挺大就先作罷，我們點了當地特產江之島丼，一開始兩人都以為是烤香菇片的親子丼，一查網路才發現是海螺切片XD\n吃飽飯沿著原路返回並往鎌倉前進，抵達鎌倉後途經商店街先去八幡宮參拜，才回商店街買小鴿子餅跟鎌倉半月做伴手禮，之後一起去打卡中島健人來過的可麗餅，點了檸檬糖口味，感覺要加個生奶油會比較好吃，回程前在車站購入吻仔魚的可樂餅和炸牛肉餅分食，結果選到若冷房的車廂，被悶烤將近一個多小時，きつい😭能夠和很久沒見的人在他鄉相約，不管做啥都備感珍貴。\n","date":"2024-04-11T00:00:00Z","image":"https://pxchen110.github.io/post/travel-japan-tokyo-2024-3/20240411_img1.jpg","permalink":"https://pxchen110.github.io/p/%E6%9D%B1%E4%BA%AC%E7%8D%A8%E6%97%85%E7%B4%80%E8%A1%8C%E4%B9%8B%E4%B8%89%E8%88%87%E5%8F%8B%E5%90%8C%E8%A1%8C/","title":"東京獨旅紀行之三。與友同行"},{"content":"「東京這個地方，聚集著從各個地方而來的人們。從前在鄉下時，從漫畫和電視劇里看見的東京，雖然燈火繁華，但人總是很冷漠。上京後我才明白了，那並不是冷漠，而是因為身為外來者的大家都心情緊張。外來者進入東京這個城市，一個個都表現出不要被吃掉的緊張狀態，終於成了一個集合體。」 \u0026ndash; 又吉直樹\n為了節省通勤時間，從淺草搬至新宿車站、靠近新大久保的飯店，一出地鐵站感受到魚龍混雜的繁華格調，忍不住讚嘆\u0026quot;這就是東京呀!\u0026quot; 跟著一坨外國人操作自助 check in 機辦理入住，晚上特別打扮一下，前往時髦的新宿歌舞伎百貨區，Lumine est 湧入下班逛街的女子，女生看不出剛下班的疲累，反而都精心打扮並充滿幹勁的挑選衣服飾品，購買力驚人。我只簡單逛了GU和藥妝店，買一杯限定的奶油地瓜風味星冰樂就回飯店休息。\n第一個周末分別和兩位朋友見面，星期六在碰面前先去中目黑的星巴克甄選工坊，這家星巴克櫻花季相當熱門，可以坐在窗邊欣賞目黑川沿途盛開的櫻花。內部空間非常寬敞，販賣おしゃれ的限定飲品跟麵包，選了一杯奶油冰淇淋佐抹茶氣泡水，抹茶與氣泡感調和的相當完美，搭配現場烘烤的菠菜烘蛋可頌度過愉快上午。\n前往澀谷跟朋友一家吃飯，忠犬小巴的紀念碑成為碰面點，甚至需要排隊合影，諾大的交叉路口走了兩遍仍然迴避人潮苦手，中餐選擇在親子友好的樂雅樂用餐，和日劇裡家庭餐廳的印象一致，飲料自助吧、白領人員洽公打電腦，好吃的歐姆蛋炸物洋食套餐，朋友的兩位女兒很有趣，當我們吃飽到夾娃娃店後，直接開啟另一個人格變得很瘋。\n晚上去朝聖挽肉と米，網路宣傳效力大，店裡感覺都是台灣人來用餐XD，整體來說，我覺得什麼都不沾的原味，以及搭配白蘿蔔泥與柚子醋的味道比較好吃。生雞蛋拌飯有點接受苦手，絞肉的筋有點大塊，咬到最後微厭世XD酒足飯飽後，穿越周末狂歡的洶湧人潮，搭乘副都心線離開澀谷。\n(雞蛋\u0026hellip;溜下去\u0026hellip;了)\n東京第二周的開局即是陰雨朦朧，新聞播報地鐵延遲的新聞，已經能想像地鐵內的月曜日鬱悶與擁擠，決定先到附近sukiya吃早餐，窩在角落吃著普通的日式定食。觀察店內顧客都是男性，某些人的疲態，透漏著直接喝到早上跑來吃牛丼的訊息。\n惠比壽花園廣場打卡sky lounge，在天氣還沒太差的狀況下，街道房屋和東京鐵塔變得好小好密集，像是東京女子圖鑑的悸動，為理想從四面八方上京的人們，在這裡過著不同卻又平凡的生活，恍惚間感受到，東京既是個能容得下任何事物又能輕易吞噬任何人的集合體呢。\n下樓後雨勢稍大，在 starbucks tevanna 店品嘗季節限定的栗子焙茶星冰樂，同時想著這些地方是第一次，也可能是人生中最後一次來的感傷。生活總是直線前進，僅能偶爾回頭看看風景，如果能把現在開始過得更好，遺憾應該會減少吧。\n眼看雨是變小了，動身前往神樂坂參拜兩間神社，但天氣不作美，在xx坂健身行程途中甚至下起大雨，褲子一路淋濕，肚子也很餓，發現看起來馬上就能吃到東西的明代富士そば，（肚子已達極限的我）沒注意要先投錢才能操作點餐機，甚至一度懷疑機器壞掉了XD 那碗簡單的熱天婦羅蕎麥麵，成為相當美味的回憶\n","date":"2024-03-28T00:00:00Z","image":"https://pxchen110.github.io/post/travel-japan-tokyo-2024-2/20240328_img1.jpg","permalink":"https://pxchen110.github.io/p/%E6%9D%B1%E4%BA%AC%E7%8D%A8%E6%97%85%E7%B4%80%E8%A1%8C%E4%B9%8B%E4%BA%8C%E7%B9%81%E8%8F%AF%E9%83%BD%E5%B8%82/","title":"東京獨旅紀行之二。繁華都市"},{"content":"領到畢業證書的那一刻，便打開電腦定下一張台北-東京來回機票。第一次挑戰外國獨旅，帶著緊張的心情搭上前往羽田的班機，聽聞入境排隊很久的傳言，下飛機後快速的(好孩子不要學)穿越人潮進入入境大隊，事先登記過 Visit Japan Web ，到日本只要簡單刷個護照報關就可以，反而等待行李是花最多時間的地方。 出關後，先去機台購買儲值 welcome suica (那時晶片卡停止發售\u0026hellip;)、取事先預訂的JR車票、跳上往淺草方向的京急線特快車，直到地鐵由暗黑隧道駛入地面、看見尋常的住宅區景色，才有抵達日本的實感。心情飛揚的改編了川端康成雪國的名言：\u0026ldquo;地下鉄道の長いトンネルを抜けると東京であった\u0026rdquo;\n踏出淺草站，九年前相同的喜多方拉麵映入眼簾，熟悉又陌生的淺草雷門我回來了，到飯店的過程也比預期順利，便先去了雷門商店街溜搭一圈，很幸運的龜十不用排隊，買了銅鑼燒品嚐，而人山人海的雷門大道令人卻步，便先往旁邊小巷探索，打算趁飯店的地利之便，早起過來拍照。\nただいま, 浅草\n晚上去玩淺草觀光文化中心後，順道去便利店和超市買了特別版的哈根達斯（好好吃！），以及兩個奇怪味道-鹽巴跟梅子的飯糰當作晚餐。\n小食評：其實有點吃不懂梅子味道的飯糰\n第二天早上睡眼惺忪的吃了早飯，先搭地鐵去神田明神，然後沿路走去上野湯島天滿宮，途經高低起伏的XX坂街道，嘗到了爬坡的辛苦滋味。將學業御守歸還至古札納所，並感謝祂在學期間的祝福，接著繼續跋涉抵達上野周遭，穿越一大片蓮花的不忍池後，終於抵達(遠的要命)上野公園（os: googlemap看著感覺輕鬆，想不到這麼遠），跑去星巴克點一杯季節限定的西瓜風味星冰樂降溫休憩，上層的西瓜味冰沙挺好喝的，如果沒有加奇異果糖漿的話會更好XD\n終於逛到上野西洋美術館，夏天就是要來這樣涼爽的市內行程，在這裏欣賞了不同時代的繪畫作品，從歌頌神聖的中世紀作品，流變至寫實派自畫像、印象派多方崛起的近代作品，內心感動不已；而此行最大目的是為了朝聖馬欣散文 \u0026lt;我像一隻貓，在上野睡著了\u0026gt; 裡，主角駐足許久的莫內作品 \u0026lt;睡蓮\u0026gt;，暫且從焦慮氾濫的時代逃離，在美術館的長椅上享受一方寧靜\n莫內\u0026lt;睡蓮\u0026gt;\n下午吃了人生第一份敘敘苑，烤肉跟醬汁組合非常完美，終於理解為何日本綜藝都說烤肉很美味，好希望台灣也有\u0026gt;\u0026lt;分店。\n第三天到下町地區閒晃，前往門前仲町站的路上，遇到許多往首都圈前進的上班族，單色系襯衫配上深色西裝褲的統一服儀，帶有一股說不出來的鬱悶與壓抑，或許只有到晚上，衣衫整潔背後的靈魂才能在各處的居酒屋被釋放。先去了富岡八幡宮參拜，遇見伊能忠敬紀念雕像，最近聽podcast聊到天下明察這本漫畫，和漫畫主角澀川春海一樣都是日本地圖與丈量領域的啟蒙，據說伊能忠敬走了近4000萬步以繪製日本地理圖，這份堅毅的職人精神，我由衷感到敬佩。\n富岡八幡宮\n9點去深川不動堂觀摩護摩儀式(火供養儀式)，住持念誦起頭經文後點火燃燒摩坷木，火勢旺盛產生霹靂啪啦的聲響，我非常喜歡的一幕是，住持一邊念誦經文和捐款祈福芳名，另一位住持拿下堂前的木牌逐一向火堆敬拜，並使牌子前端稍微煙燻到，從牌子前端已黑化的狀態，可看出每日祈福的習慣；火勢隨著太鼓和各式樂器的加入越發旺盛，火花冉冉升起到不動明王尊前並直至堂頂，這彷彿是大家的祈福與信仰昇華的證明。查閱資料後得知，火焰燃燒至1公尺之高，據傳能夠燒盡煩惱，讓身心靈獲得清淨。\n我想，或許信仰不保證會被回應，但如同升起的火花，雖然微小但一定會被聽（看）見的，帶著感動的心情，參觀殿內各式神明，並潛心敬拜祈求保佑。\n非常推薦來深川不動堂參加護摩儀式，在肅敬虔誠的儀式過程，見證信仰的可貴能量，獲得滿滿感動\n帶著木村拓哉與二宮和也買過的松露餐包前往清澄庭院，理想中看風景野餐很豐滿，但庭院高低起伏的石頭路相當骨感，經過兩天摧殘的下大腿肌炸裂，直接被打入痛苦現實，臨時改變計畫回飯店休息。\n清澄庭園風景如畫，還遇到佳人拍婚紗，有機會一定再訪！只是夏天在戶外逛有點熱\n晚上去喫茶店體驗初戀主角拿手菜拿坡里麵和哈密瓜蘇打，外觀可以但味道讓人懷疑人生，甚至不清楚自己在吃啥，度過偏雷的一天。吃飽後，欣賞著淺草繁榮的夜色邊散步回家。\n見た目はいいけど：））\n一些後記：\n淺草的晝與夜\n離開前草前拜訪三十歲魔法師取景的喫茶店，店內裝潢復古且餐點日式洋食風，點了推薦的炸蝦三明治，麵包上塗的黃芥末有被嗆到，但整體來說很好吃，蝦子炸的很香且配上高麗菜絲味道剛好，夾在酥脆的麵包裡每一口都很好吃。\n對於日本飲食店也有些疑惑的地方，像是冰水的冰塊多到不會融化光（這樣比較有被服務到的價值？），或是只提供濕紙巾而非衛生紙擦手等特點，都滿困擾又有趣的。\n","date":"2024-03-21T00:00:00Z","image":"https://pxchen110.github.io/post/travel-japan-tokyo-2024/20240321_img2.jpg","permalink":"https://pxchen110.github.io/p/%E6%9D%B1%E4%BA%AC%E7%8D%A8%E6%97%85%E7%B4%80%E8%A1%8C%E4%B9%8B%E4%B8%80%E4%B8%8B%E7%94%BA%E8%A6%8B%E8%81%9E%E9%8C%84/","title":"東京獨旅紀行之一。下町見聞錄"},{"content":"Background photo by Rubaitul Azad on Unsplash\nexcel 是製作工作報表的好幫手，比起手動新增資料，若能用 python 自動生成 excel 檔並填入內容，可節省時間增加辦公效率。今天將介紹一款可客製化生成 excel 的 python 套件 xlsxwriter，包含常用的函數功能，並以實例呈現參數的使用結果。\n下載與引入套件 若在 Anaconda 環境下使用python或jupytor notebook， xlsxwriter 屬於內建套件，可直截引入；若在 miniconda 等其他環境，需要 conda / pip install 下載後引入\n1 import xlsxwriter 生成 excel 文件 xlsxwriter 將整份 excel 檔案稱為 Workbook，內部的工作表稱為 worksheet，而每個格子稱為 cell。\n開啟新.xlsx檔並注意最後要關閉工作表\n1 2 workbook = xlsxwriter.Workbook(\u0026#39;example.xlsx\u0026#39;) workbook.close() 注意:如果使用 with 方式開啟 可以不用加上close()來關閉工作表\n1 2 with xlsxwriter.Workbook(\u0026#39;example.xlsx\u0026#39;) as workbook: ... worksheet 建立工作表 透過 workbook.add_worksheet() 實體化工作表，工作表名稱可自行更改\n1 2 worksheet = workbook.add_worksheet() # default命名為sheet1 或 工作表1 worksheet = workbook.add_worksheet(\u0026#39;Data\u0026#39;) # 開啟名為Data的工作表 注意: xlsxWriter 支援處理的工作表邊界值為 1,048,576 rows x 16,384 columns\n輸入內容 透過 worksheet.wtire() 在指定位置寫入內容 excel 的格線就跟棋盤一樣，可以用列/欄編號，來指定棋子放置的地方，如在A1填上 \u0026lsquo;apple\u0026rsquo; 文字\nxlsxwriter 接受以下兩種指示方式:\n使用索引 .write(row_index, col_index, args) :注意工作表跟 python list 一樣使用 0-index，因此第一列/欄的 index = 0 使用標記 .write('row-col-notation', args) : 例如第一列第一欄等價於 A1，第二列第三欄等價於 C2 實例: 當我想將資料填入第一列(row 1)的第一欄(col 1)，以下兩種寫法都會在相同位置填入字串:\n1 2 worksheet.write(0, 0, \u0026#39;hello\u0026#39;) worksheet.write(\u0026#39;A1\u0026#39;, \u0026#39;hello\u0026#39;) 指定輸入類型 為防止輸入內容被自動轉換型別，如 2/29 的字串被 excel 當成日期轉成 2月29日，可以用.write_${type}()函數指定寫入類型，常用的有:\n1 2 3 4 5 6 7 8 worksheet.write_string() worksheet.write_number() worksheet.write_formula(\u0026#39;A1\u0026#39;, \u0026#39;=SUM(B1:B4)\u0026#39;) worksheet.write_boolean(0, 0, False) worksheet.write_blank(0, 0, None) worksheet.write_datetime(\u0026#39;B2\u0026#39;, date_time) date_time = datetime.datetime.strptime(\u0026#39;2013-01-23\u0026#39;, \u0026#39;%Y-%m-%d\u0026#39;) 整列/整欄輸入 (搭配迴圈) 當你想將list, dict 內的資料寫入同一列/欄內，可以用 .wirte_row() 和 .write_column() 兩函數，以下舉個例子:\n1 2 3 4 # 如果想將 python list 寫入 excel A 欄位 input_list = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] worksheet.write_column(\u0026#39;A1\u0026#39;, input_list) worksheet.write_column(0, 0, input_list) 結果輸出如下: worksheet 樣式設定 整列/整欄 設定高度/寬度 透過 .set_row() 和 .set_column() 設定格子大小，常會搭配樣式設定 注意.set_row() 以設定一列的高度為限，而.set_column() 要指定範圍，如 \u0026lsquo;B:D\u0026rsquo; 或 1, 3 等\n1 2 worksheet.set_row(1, 20) worksheet.set_column(\u0026#39;D:D\u0026#39;, 20) 隨內容最適化格子大小 使用worksheet.autofit()，讓最長的內容寬度當作欄位寬度，減少文字遮蓋\n自動增加篩選 透過 worksheet.autofilter(first_row, first_col, last_row, last_col) 添加篩選符號，須設定作用範圍\n1 2 3 4 5 worksheet.write(0, 0, \u0026#39;hello\u0026#39;) ## 以下兩者等價 worksheet.autofilter(0,0,1,1) worksheet.autofilter(\u0026#39;A1:B2\u0026#39;) 結果如下圖所示，可以看見篩選符號(三角形)自動出現在工作表上\n固定某列/欄 為了增加比對方便性，透過.freeze_panes() 在滑動工作表時，讓指定欄位固定不消失\n1 worksheet.freeze_panes(1,1) ## 將第一列/第一欄固定不動 縮放比例 worksheet.set_zoom() 設定工作表開啟時，初始的縮放大小(default 100%)\n1 worksheet.set_zoom(150) ## 開啟大小放大為150% format 客製化設定 透過 workbook.add_format() 增添客製化，樣式需用中括號 {} 包起並以 key: value 形式撰寫:\n1 a_format = workbook.add_format({\u0026#39;bold\u0026#39;: True, \u0026#39;font_color\u0026#39;: \u0026#39;red\u0026#39;}) 定義客製化樣式的方式有兩種:\n變數和樣式一起定義cell_format = workbook.add_format({'font_color': 'red'}) 先定義變數再賦予樣式 1 2 3 cell_format = workbook.add_format() cell_format.set_font_color(\u0026#39;red\u0026#39;) cell_format.set_bold(True) 樣式種類可參考官方網站 樣式有分六大類Font, Number, Protection, Alignment, Pattern, and Border\n傳入工作表 傳入工作表的方式有以下兩種\n在 worksheet.write() 寫入同時加上樣式 用 worksheet.set_row() 和 worksheet.set_column() 為整列/欄加上樣式 實際例子:\n1 2 3 4 5 6 ## 在 A1 寫入 \u0026#39;hello\u0026#39; 並設定文字顏色為紅色 a1_format = workbook.add_format({\u0026#39;font_color\u0026#39;: \u0026#39;red\u0026#39;}) worksheet.write(0, 0, \u0026#39;hello\u0026#39;, a1_format) ## 將 B1 整行的背景顏色設為黃色，寬度調整為11 bcol_format = workbook.add_format({\u0026#39;bg_color\u0026#39;: \u0026#39;yellow\u0026#39;}) worksheet.set_column(\u0026#39;B:B\u0026#39;, 11, bcol_format) 生成結果入下圖所示: 可以看到注意B欄的寬度調整為 11，和 default 8.43 相比(A, C, D欄) 變得較寬\nchart 生成圖表 透過 workbook.add_chart() 生成圖表後，使用 worksheet.insert_chart() 插入\n個人喜歡將資料整理好並使用R ggplot 做視覺化，所以省略 xlsxwriter 生成圖表的函數介紹\n參考資料 https://xlsxwriter.readthedocs.io/worksheet.html\nhttps://xlsxwriter.readthedocs.io/format.html\n","date":"2024-03-15T00:00:00Z","image":"https://pxchen110.github.io/post/python-xlsxwriter/20240315_img1.jpg","permalink":"https://pxchen110.github.io/p/python%E7%B3%BB%E5%88%97-%E5%88%A9%E7%94%A8-xlsxwriter-%E6%A8%A1%E7%B5%84%E8%BC%95%E9%AC%86%E8%A3%BD%E4%BD%9Cexcel/","title":"Python系列： 利用 xlsxwriter 模組輕鬆製作excel"},{"content":"Background photo by Artturi Jalli on Unsplash\n大家在撰寫 python 是否有遇到以下問題/需求:\n目標檔案與路徑需要不停切換 想自動化的遍歷目標路徑下是否有目標檔案，若檔案存在才進行後續處理 在 python 環境下想跳轉至 linux 執行系統命令 以上這些問題都可以使用 python 強大的內建模組 os (operating system) 來完成! 本文將介紹常用的 os 函式，特別是文件與路徑操作相關的內容，以及其實際應用。\n引入模組 os 屬於內建模組，直接引入即可使用\n1 import os os 在路徑名稱的操作函式為 os.path()，如等下會介紹的 os.path.join(), os.path.exists() 等，要寫完整才不會報錯\n目標1: 操作目標路徑與檔案 os.getcwd() 取得當前路徑，等同 linux 的 pwd os.chdir(path) 變換預設的工作路徑，等同於 linux 的 cd /to/path 在路徑的操作，除了直接打出絕對路徑，也可以使用os.path.join() 來更靈活的操作路徑，下面舉一個例子: 1 2 3 4 5 6 7 8 9 10 # 假設在 /home/dirs/ 下有兩個資料夾 a, b，我想要分別以這兩資料夾為工作路徑來做事， # 直接設兩個變數分別存 a, b路徑，有點浪費 a_path = \u0026#39;/home/dirs/a\u0026#39; b_path = \u0026#39;/home/dirs/b\u0026#39; # 設相同的路徑為變數，並以 os.path.join 產生a, b 的路徑 root_dir = \u0026#39;/home/dirs\u0026#39; os.path.join(root_dir, \u0026#39;a\u0026#39;) # 等價於 a_path os.path.join(root_dir, \u0026#39;b\u0026#39;) # 等價於 b_path os.path.basename(path) 可取出目標路徑中最底層的資料夾/檔案名稱；反之 os.path.dirname(path) 可取出最底層以上的路徑，下面舉個例子比較 1 2 3 4 paths = \u0026#39;/home/dirs/a/a.txt\u0026#39; print(os.path.basename(paths)) # \u0026gt;\u0026gt; a.txt print(os.path.dirname(paths)) # \u0026gt;\u0026gt; /home/dirs/a os.path.abspath(file_name) 和 os.path.realpath(file_name) 都可以找出目標檔案的絕對路徑 1 2 3 4 5 6 7 8 # 假設有一個檔案位於 /home/dirs/a/a.txt file_name = \u0026#39;a.txt\u0026#39; print(os.path.abspath(file_name)) # \u0026gt;\u0026gt; /home/dirs/a/a.txt print(os.path.realpath(file_name)) # \u0026gt;\u0026gt; /home/dirs/a/a.txt 注意: 兩者的差別在於，若是 soft link 指向的目標檔案，os.path.realpath() 會印出原始檔案的路徑! 請看下面例子\n1 2 3 4 5 6 7 8 # 假設目標檔案是 ln -s /home/dirs/a.txt /home/dirs/b.txt print(os.path.abspath(\u0026#39;b.txt\u0026#39;)) # \u0026gt;\u0026gt; /home/dirs/b.txt print(os.path.realpath(\u0026#39;b.txt\u0026#39;)) # \u0026gt;\u0026gt; /home/dirs/a.txt os.path.realpath(__file__) 為常見寫法，用來獲取當前執行 python script 的絕對路徑，其中 __file__ 指的是目前引用的 python script 1 2 3 4 5 6 7 # 假設我的 python script 名為 test.py、位於 /home/dirs 底下 print(os.path.realpath(__file__)) # \u0026gt;\u0026gt; /home/dirs/test.py # 若只想要獲取路徑，可搭配 os.path.dirname() 來操作 print(os.path.dirname(os.path.realpath(__file__))) # \u0026gt;\u0026gt; /home/dirs 注意: 若 python script 存在的路徑與執行 script 路徑不同，執行 os.path.realpath()與os.getcwd() 的結果會不同!\n1 2 3 4 5 6 7 8 # 假設我的 python script 名為 test.py、位於 /home/dirs 底下 # 現在我到 /home 路徑下執行 python script: python3 test.py print(os.path.dirname(os.path.realpath(__file__))) # \u0026gt;\u0026gt; /home/dirs # print(os.getcwd()) # \u0026gt;\u0026gt; /home 補充: os.path.abspath(os.path.dirname(__file__)) 和 os.path.dirname(os.path.abspath(__file__)) 順序有差嗎? 參考網站\n總結一下，在印出路徑這件事上，受到相對路徑、絕對路徑與鏈結等多重因素大亂鬥，請小心使用測試\n目標2: 檢查目標路徑/檔案的存在性 如果想確認目標路徑是否存在，os 能協助確認並返回boolean值；以下列出常用的函數與使用區別:\nos.path.isdir() 可以確認資料夾路徑是否存在 os.path.exists() 可以確認資料夾路徑和檔案是否存在 os.path.isfile() 可以確認檔案是否存在 舉一個實例比較:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 假設在 /home/dirs 路徑下存在一份名為 file.txt 的檔案 # dirs/ # └── file.txt exist_path = \u0026#39;/home/dirs\u0026#39; exist_file = os.path.join(exist_path, \u0026#39;file.txt\u0026#39;) # 確認路徑是否存在 os.path.isdir(exist_path) # \u0026gt;\u0026gt; True os.path.exists(exist_path) # \u0026gt;\u0026gt; True os.path.isfile(exist_path) # \u0026gt;\u0026gt; False isfile 不能判斷路徑是否存在!! # 確認檔案是否存在 os.path.isdir(exist_file) # \u0026gt;\u0026gt; False isdir 不能判斷檔案是否存在!! os.path.exists(exist_file) # \u0026gt;\u0026gt; True os.path.isfile(exist_file) # \u0026gt;\u0026gt; True 注意: 從上面的例子可知，即使路徑檔案都存在，os.path.isdir() / os.path.isfile() 都有各自的判斷侷限，建議多使用 os.path.exists() 來減少麻煩，更多討論請參考這個網址\n目標3: 創建資料夾 如果想在目標路徑中創建資料夾，os 有兩個相當於 linux mkdir 的函數:\nos.mkdir(): 只能創立一層(最底層)資料夾，若上層資料夾不存在會報錯 os.makedirs(): 可以創立多層，若想忽略已創建資料夾可加上 exist_ok=True (這樣就相當於linux的 mkdir -p )。為了保險起見建議多使用os.makedirs減少報錯麻煩 另外有點要注意，若路徑已經存在 os 也會報錯，因此常見的寫法是先用 os.path.exists() 判斷目標路徑是否存在，再來創建資料夾，下面舉一個程式實例:\n1 2 3 4 5 6 7 8 # 假設我們想將 /home/dirs/folder1 設為當前的工作目錄，但又不確定 dirs/folder1 是否存在 work_path = \u0026#39;/home/dirs/folder1\u0026#39; if os.path.exists(work_path): # if return True os.chdir(work_path) else: # if return False os.makedirs(work_path) # create dirs os.chdir(work_path) 目標4: 遍歷目標路徑下的所有檔案 如果目標路徑下包含多層子路徑與檔案，使用者不可能一層層去探訪篩選，模組 os 提供強大的函數 os.walk 協助走訪遍歷路徑下所有角落，如同 linux tree 一樣走訪(並印出)路徑下所有內容\nos.walk 會輸出三數值為一組的tuple (dirpath, dirnames, filenames)，一般會搭配迴圈來寫，並將三個輸出分別命名為 root, dirs, 以及 files:\n假設我們想走訪 /home/dirs 路徑下的內容，透過 tree 已知有這些路徑/檔案\n1 2 3 4 5 6 7 ├── a │ └── a.txt ├── b │ └── b.txt ├── c │ └── c.txt └── file.txt 基本的 python code:\n1 2 3 path = \u0026#39;/home/dirs\u0026#39; for root, dirs, files in os.walk(path): ... print(root) 1 2 for root, dirs, files in os.walk(path): print(roots) 得到以下輸出，可以看到 root 會隨深入下層資料夾而改變:\n1 2 3 4 /home/dirs /home/dirs/a /home/dirs/b /home/dirs/c print(dirs) 1 2 for root, dirs, files in os.walk(path): print(dirs) 得到以下輸出，和 root 輸出順序相對應，可看到 dirs 列出的是當前 root 路徑下包含的資料夾名稱\n1 2 3 4 [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] # /home/dirs 下有三個資料夾 [] # /home/dirs/a 下沒有資料夾 [] [] print(files) 1 2 for root, dirs, files in os.walk(path): print(files) 得到以下輸出，和 root, dirs 輸出順序相對應，可看到 files 的是當前 root 路徑下包含的檔案名稱\n1 2 3 4 [\u0026#39;file.txt\u0026#39;] # /home/dirs 下有一個檔案 [\u0026#39;a.txt\u0026#39;] # /home/dirs/a 下有一個檔案 [\u0026#39;b.txt\u0026#39;] [\u0026#39;c.txt\u0026#39;] 因為 files 只有檔案名稱，常利用 os.path.join(root, f) 來取得檔案的絕對路徑\n實例 了解基本構造後，透過實例來了解 os.walk() 的可以如何使用。 假設我想取出每個樣本名稱folder中，結尾包含 .tab.gz 的檔案來操作 目標路徑大致的結構如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /home/dirs/folders/ ├── annotation │ ├── AD_sample1 │ ├── AD_sample1.annotation.tab.gz │ ├── AD_sample2 │ ├── AD_sample2.annotation.tab.gz │ ├── AD_sample3 │ ├── AD_sample3.annotation.tab.gz │ ├── BS_sample12 │ ├── BS_sample12.annotation.tab.gz │ ├── BS_sample14 │ ├── BS_sample14.annotation.tab.gz │ ├── BS_sample17 │ ├── BS_sample17.annotation.tab.gz │ ├── BS_sample18 │ ├── BS_sample18.annotation.tab.gz │ └── BS_sample19 │ ├── BS_sample19.annotation.tab.gz ├── csv ├── multiqc ├── logs └── reports python code:\n1 2 3 4 5 6 7 work_path = \u0026#39;/home/dirs/folders/\u0026#39; for root, dirs, files in os.walk(work_path): for f in files: if f.endswith(\u0026#39;.tab.gz\u0026#39;): file_name = os.path.join(root, f) with open(file_name, \u0026#39;r\u0026#39;) as fh: ... 目標5: 產生symlink 和 linux 中的 ln -s 相同，os 也可協助建立連結以節省空間使用\nos.symlink(sourec_path, dest_path) 相當於 ln -s os.islink() 相當於用 ls -alh 檢查 os.unlink() 相當於 unlink，注意資料夾不能加 / 不然移除無效 目標6: 執行系統命令 os.system(cmd) 也可以在 python 環境下執行系統命令，和 subprocess 模組功能相似，但較為陽春\n參考資料與補充 python 3.4 後有新的模組 pathlib (物件導向的操作) 其功能和 os 相似，有興趣可以參考，由於目前 os 使用上沒太大問題，就沒有特別轉換模組 https://docs.python.org/zh-tw/3/library/os.html#files-and-directories\n","date":"2024-03-07T00:00:00Z","image":"https://pxchen110.github.io/post/python-os/20240307_img1.jpg","permalink":"https://pxchen110.github.io/p/python%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-os-%E6%88%90%E7%82%BA%E7%B3%BB%E7%B5%B1%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%B8%AB/","title":"Python系列：使用 os 成為系統操作大師"},{"content":"一點渴望加一陣衝動，一場周末的出走就此成形。獻給2024年2月高雄黃色小鴨的旅行紀錄\n一路南下雲層日漸單薄，心裡愈發期待南島的炙熱，卻忘記春天後母面，穿著單件短袖站在沒有陽光的車站月台，冷不防顫抖一下。\n果貿社區的初印象類似香港的公屋，密密麻麻的鐵窗花建築群並排成同心圓，沿圓周漫步一圈，社區阿伯阿嬤買菜散步的日常，陽光落在他們身上，一幅歲月靜好的光景。\n路上汽車如同俄羅斯方塊，垂直交錯的並排交叉臨停，看似無秩序下，車主總能在關鍵時刻跑出來移車，維持社區的和平。買了寬來順早點的豆漿與蛋餅，到市場旁邊的公園長椅吃早餐；其實我對中式早點沒有太多興趣，但看著揉進鄉愁後愈發膨脹的麵團，內心升起必須吃一下的想法，或許是沒有相同經歷，最終難以與之共鳴。\n從內惟車站搭火車到高雄車站，再轉捷運至文化中心踩點。\n作為文青，我喜歡拜訪每個城市的獨立書店，體驗不同的書店設計與選書，高雄站去了三餘書店，那裡用心規劃的文藝創生空間，看展看書喝咖啡，三種願望一次滿足。\n店主在窗上抄寫詩句、搭配午後陽光的一隅景色，怦然心動程度100%；挑一本攝影集坐下閱讀，作者擅長抓拍街上人們出糗的瞬間，搭配有趣的文字命題，會心一笑程度100%。\n鹽埕埔站下車，路上人們難掩看鴨的興奮，努力在人潮夾縫中前行，從流行音樂中心遠遠望去，鴨子躲在建築後露出微笑，太專注於此景差點因沒注意落差而摔倒。\n港邊盛況空前，大家拿著相機拍照留念，也不乏借位拍搞笑照片的身影，橋上更是人山人海，幸運得找到一個位置，吹著海風欣賞晃動的鴨屁股。\n由於飢餓感抗議，在天黑燈光秀前先行離開，突然瞥見遠方夕陽餘暉，臨時決定折返往港口奔去，如夸父追日般向前奔跑。最終沒有成功追到落日，但即使如此，不顧一切往前跑的過程還是很棒，帶著遺憾與痠痛去吃晚餐。\n晚餐是鴨肉飯，點了一飯一菜一湯，上桌被如同阿嬤怕你餓一般的份量震驚到，還好當時肚子很餓全部完食。\n第二天早上安排旗津，早餐選擇南部限定丹丹漢堡，點了（本人）定番的鮮酥雞配皮蛋瘦肉粥，以及紅茶牛奶。\n吃飽寄好行李準備去搭渡輪，約莫8點的鼓山路上寂靜無比，尚未甦醒的街區空無一人，有種誤闖寂靜嶺的錯覺。\n搭上渡輪，前方未知的新鮮感讓腎上腺素升高，於是深呼吸感受海風流入肺部，把注意力放在沿途的高雄港風光，遠方能見度頗差，船隻附近的海面在陽光照射下波光粼粼。\n約十分鐘抵達旗津渡船頭，海岸線往步道人煙罕至，半邊叢林半邊海岸的景色令人著迷，還有一些缺口讓人駐足拍照。\n抵達雕像折返點，礁岩的懸崖一角好似北歐風光，海浪拍打上礁岩激起浪花，盯了好久都不會到無聊。\n陽光正好，一切都如此剛好地契合美景的條件，而我也正好在這裡，享受此時彼刻；也許下一秒可能會更美麗，也可能衰微，但親眼所見、親身所感的事情，是永遠無法被復刻的。\n離開前再次回到這個角落，將它吃進手機記憶體內一起離開。最後還去了燈塔、吃了旗魚黑輪才回西子灣。\n高雄いいね！下次再見了！\n","date":"2024-02-27T00:00:00Z","image":"https://pxchen110.github.io/post/travel-kaohsiung/20240227_img0.jpg","permalink":"https://pxchen110.github.io/p/%E5%B0%8B%E8%A6%93%E9%99%BD%E5%85%89%E8%BF%BD%E9%80%90%E5%B0%8F%E9%B4%A8%E9%AB%98%E9%9B%84%E6%97%85%E8%A1%8C%E9%9B%9C%E8%A8%98/","title":"尋覓陽光。追逐小鴨。高雄旅行雜記"},{"content":"海報英文有 YIYI 和 A one and A two\u0026hellip; 的註解 這是一個喜宴開頭喪禮結尾，由一家人的生活片段交疊而成的電影，時空背景設定在沒有智慧型手機的台北，也是我尚未出生的時代，所以電影裡的台北景色對我來說都很新奇: 麥當勞內用區、誠品咖啡廳、或是圓山大飯店的宴會廳，帶有微顆粒感的畫質讓電影更吸引人。\n人物與課題 電影裡的一家四口，雖然戲份佔比不一，但如導演所說，在不同年紀看，都能在某位角色身上映射出相似的課題與身影\n媽媽希望透過信仰的力量，讓奶奶早日醒來，但在希望來臨前、一成不變的光景讓她感到無力，對現況的失望被她歸咎於自己在都市內無法堅定信仰，於是亦然決定到山上進修。 我本身的家庭背景也有一定程度的信仰，所以能理解她想透過祈禱來安定內心的想法，但在事與願違下，我或許會選擇一邊祈禱一邊接納現實、尋求另外的方法努力（理性層面是這樣想），而非選擇逃避。\n爸爸在理想與現實衝突下，聽到了來自內心的反抗，並試圖逃離功成名就，面對舊情人不解當年的分手，他雲淡風輕的說出當時的感受\n考上電機系後，我爸爸很開心，我媽媽很開心，妳也很開心，只有我不開心，我只感到悲哀\n最後他仍為家人責任妥協於現實、成為背道而馳的自己，面對商場的唯利主義，真誠的心一次次被澆熄與欺騙。\n電影裡當他在日本面對不告而別的舊情人、以及同事不重視誠信的態度，頓時跌入失望的谷底，和滿心期待的啟航畫面呈現強烈對比。\n大女兒是和我年齡最接近的角色，而生活給予她兩件歷練使她成長：沒倒垃圾與奶奶昏迷的愧疚感，以及在友情與懞懂愛情間拉扯的灼烈罪惡感，電影裡小莉的質問使她頓時心虛細語，午夜時分無法入眠。\n這些沒有回應的、無疾而終的經歷在她生命裡畫上幾道痕跡，最終趴在奶奶腿上、一幅歲月靜好的稀釋這些成長痛。\n小兒子對我來說是一個的小屁孩（誤，他帶有童真的眼光，讓本應圓滑的世俗稜角變得更為單純有創造力，像是他拿著底片相機拍著\u0026quot;別人看不見的另外一面\u0026quot;、試圖記錄吵醒人的蚊子身影，這些行為讓人不自覺露出微笑。\n只可惜現在的我已是接近訓導主任的心靈，面對童心未泯的事物，常帶著過於世俗的眼神去審視甚至曲解，或許我們應該喚起內心沉睡的小孩來看待事物。最後在喪禮上，導演也透過他用較為童真的眼光去解讀死亡這件事。\n他們都說你走了，但我不明白你去哪裡，或許有一天我們還會再見面，到時你再帶我去看你去了哪裡\n即使每個人都各自面臨生活課題與情緒，但仍踏入家門同坐一桌吃飯，聊著不著邊際試圖關心對方的話題，家人之間既疏離又接近得情感，或許也是最難能可貴的關係。\n印象深刻的場景一: 跟奶奶說話 奶奶的房間就像是告解室，讓觀眾有機會傾聽角色內心獨白的場景，因為沒有人回應，就像爸爸坦白地說道\n其實這樣自言自語對我來說蠻難得，我這樣講你不要生氣，我覺得，好像在拜拜。除了不知道對方是不是聽得到之外，對我自己講的話是不是真心的，好像也沒什麼把握\n那裏是角色內心世界的延伸，和與外界互動的所武裝起來的堅硬外層相比，人物更加深情、但相反也更加沈默 \u0026ldquo;即使悲傷也無人應答\u0026rdquo; 想起自己也曾躺在床上，手握護身符，多次向神訴說我的心情、祈求一個應許，以及一個不可能的回應，雖然生活物理上一成不變，但我想這股聲音中就能被聽見，並自我寬慰，比起悶在心裡會更好受一點。\n印象深刻的場景二：台日兩地穿插的約會場景 電影以交叉蒙太奇的手法，呈現兩代人在情感約會上的重疊相似性，一邊是遠在東京街頭漫步的中年男女，另一邊是在信義區初次相約的年輕男女，互相靠近的心與牽起的手，情感展開的不言而喻。\n印象深刻的場景三：拍下別人看不見的另一面 我們是不是只能知道一半的事情啊？我們只能看到前面，看不到後面，這樣不就有一半的事情看不到了嗎？\n童真的眼光總能犀利點出長大成人後被遺忘的真理，我們常因片面的善惡去評判對方的言行舉止，更可能忽略人(包含自己)擁有多個面向的事實，以詼諧地拍攝物理上看不見的那面，來激發我們沉思。\n最後\u0026hellip; 這部電影雖無驚險刺激的場景，楊德昌導演透過仔細雕琢的劇本，呈現出平淡而飽滿的故事，那些虛構角色身上、以最大公約的方式交疊了世間許多課題，也成功引起廣大共鳴，不用旁白敘述而用動作台詞，就能讓我們聯想這些角色的性格與境遇，是很高明的成就。導演先前拍攝的牯嶺街少年殺人事件，也同樣在3個小時的有限框架下，以精心設計的鏡頭故事，刻畫出有血有肉的時代與角色輪廓，很容易與之共情。\n參考資料（劇照來源） https://plaza.openmuseum.tw\nhttps://blog.addmusic.tw/2019/01/17/金獎剪接師陳博文：「好的剪接師，要對音樂有敏/s_23ff5b50ed7c50b7235542b67cc577c5b2302e81e52c007f9219e21ecef04ef5_1546932553956_imagelab-nownews-com_/\nhttps://www.ettoday.net/dalemon/post/38955\n","date":"2024-02-26T00:00:00Z","image":"https://pxchen110.github.io/post/movie-yiyi/20240226_img0.webp","permalink":"https://pxchen110.github.io/p/%E6%A5%8A%E5%BE%B7%E6%98%8C-%E4%B8%80%E4%B8%80-%E8%A7%80%E5%BE%8C%E6%84%9F/","title":"楊德昌《 一一 》觀後感"},{"content":"Background photo by Artturi Jalli on Unsplash\n撰寫程式專案時，常需要在父進程下創建子進程進行支線任務，例如在shell script(.sh)中，會在 linux command 的基礎下，包含 python script, R script 的執行，透過串聯輸出\\輸入檔案的方式，產生目標內容。\n同理我們也能在以 python 做為父進程的情況下，以 subprocess 模組協助執行外部指令(子進程)、串接資料輸出\\輸入的管道、並取得返回值，本文將介紹 subprocess 模組管理子進程的方法與程式碼。\nPart1: subprocess 套件引入 subprocess 為 Python 內建模組，引入即可使用\n1 2 import subprocess from subprocess import PIPE, Popen Part2: 基本函數: run() and Popen() subprocess 啟動子進程的方式有兩種 subprocess.run() 和 subprocess.Popen 其中run()在大部分情況下都可使用，Popen() 則使用於更進階的底層操作 兩函數的基本參數都一樣，下面以 run() 來做參數介紹:\nsubprocess.run() 外部指令的參數有兩種輸入方式，但建議以list形式輸入: 可以使用 shlex 套件協助將指令 string 切分成 list 注意: shell = True 代表允許系統調用shell執行，如同讓主機門戶大開、容易發生 shell injection 的資安風險，請盡量少用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # in linux shell ln -s # in python subprocess run ## method1: input as list (recommend!) ## 徒手拆分成list subprocess.run([\u0026#39;ln\u0026#39;, \u0026#39;-s\u0026#39;]) ## 用shlex協助拆分成list cmd_split = shlex.split(\u0026#39;ln -s\u0026#39;) subprocess.run(cmd_split) ## method2: input as string, with shell = True subprocess.run(\u0026#39;ln -s\u0026#39;, shell = True) default 情況下，run() 執行無誤 (returncode = 0) 後會返回 subprocess.CompletedProcess 的實例並印出結果；如果想查看返回狀況，可加上check = True ， 當 returncode != 0 會抛出 CalledProcessError default 情況下，run() 將結果直接印出，若想抓取輸出並存成變數，可使用 capture_output = True default 輸出形式為 bytes，可用 text = True 來更改輸出形式，透過下面例子來比較: 1 2 3 4 5 6 7 a = subprocess.run([\u0026#39;pwd\u0026#39;], capture_output = True) print(a.stdout) \u0026gt; b\u0026#39;/current/working/directory\\n\u0026#39; a = subprocess.run([\u0026#39;pwd\u0026#39;], capture_output = True, text = True) print(a.stdout) \u0026gt; /current/working/directory subprocess.Popen() 大部分的參數跟 run() 相同，特別的是只有 Popen() 可使用 PIPE 在串聯子進程間的 stdout, stdin, stderr，並搭配 communicate()防止死瑣，詳細內容在Part3 注意: run()不能使用 PIPE 和 communicate()\nPart3: 以 PIPE 串聯進程間的輸入\\ 輸出 PIPE 觀念相當於 linux 裡的 piping |，可減少中間檔案儲存的冗餘。 下面的例子利用 PIPE 將第一個子進程的輸出，當作第二個子進程的輸入\n1 2 cmd1 = subprocess.Popen([\u0026#39;pwd\u0026#39;], stdout = PIPE) subprocess.Popen([\u0026#39;ls\u0026#39;, \u0026#39;-alh\u0026#39;], stdin = cmd1.stdout) PIPE 的實用程度高，但當管道內暫存的資料量過大，會造成子進程卡住，永遠無法結束(稱作死瑣)，使用 communicate() 可即時讀取 PIPE 內容:\n1 2 3 e = subprocess.Popen([\u0026#39;pwd\u0026#39;], stdout = PIPE, stdin = PIPE, text = True) out, err = e.communicate() print(out) 另外也可將 PIPE 的輸出存進檔案，解決死瑣問題\n1 2 f = open(\u0026#39;save_stdout.txt\u0026#39;, \u0026#39;w\u0026#39;) subprocess.Popen([\u0026#39;pwd\u0026#39;], stdout = f, text = True) Part4: 實例應用 Example1: 我想檢查幾份log檔是否有回報錯誤訊息，利用 PIPE 加上 communicate() 將子進程 grep 到的內容存進 out 變數、並判斷是否有錯誤訊息\n1 2 3 4 5 6 7 8 9 10 11 12 13 import shlex import subprocess from subprocess import PIPE, Popen logs = [\u0026#39;log.1\u0026#39;, \u0026#39;log.2\u0026#39;] for i in logs: cmd = shlex.split(\u0026#39;grep \u0026#34;terminated with an error exit status\u0026#34; {}\u0026#39;.format(i)) p = subprocess.Popen(cmd, stdout = PIPE, text = True) out,err = p.communicate() if out: ## NOT NULL sys.exit(\u0026#39;Error occured, please refer to {} for more detail\u0026#39;.format(i)) Example2: 現在有一份vcf原始檔，需要先以bio-tool(using Singularity)做格式轉換，再用python做資料篩選，但我不想產生轉換格式的中間檔，於是寫了以下 python script，以原始vcf做input，先開一個子進程處理vcf，以PIPE儲存輸出，存進 pyton 變數並作後續篩選\n1 2 3 4 5 6 7 8 9 10 11 12 import sys import shlex import subprocess from subprocess import PIPE, Popen origin_vcf = sys.argv[1] cmds = shlex.split(\u0026#39;singularity exec vcflib_1.0.0-rc2.sif vcf2tsv {}\u0026#39;.format(origin_vcf)) input_vcf = subprocess.run(cmds, stdout = PIPE).stdout.decode(\u0026#39;utf-8\u0026#39;).splitlines() for lines in input_vcf: #post-filtering in python 參考資料 https://docs.python.org/zh-tw/3/library/subprocess.html# https://www.aikaiyuan.com/4705.html\n","date":"2024-02-22T00:00:00Z","image":"https://pxchen110.github.io/post/python-subprocess/20240222_img1.jpg","permalink":"https://pxchen110.github.io/p/python%E7%B3%BB%E5%88%97subprocess%E6%A8%A1%E7%B5%84%E7%AE%A1%E7%90%86%E5%AD%90%E9%80%B2%E7%A8%8B/","title":"Python系列：subprocess模組管理子進程"},{"content":"Background photo by Artturi Jalli on Unsplash\n撰寫python script時，變數內容若能隨使用者彈性更改，可提升程式實用性；本文介紹三種常用的引入外部參數模組: sys, argparse, 以及 click，文章將介紹模組/套件的使用方式，撰寫相同輸出的實例，並分析優缺點以供讀者參考。\nsys 模組 sys 屬於 python 內建模組，其下的 sys.argv[index] 是最基本的引入方式。\nsys.argv 的運行方式，是把bash command line 中輸入的指令存成一個list，並引入對應index的內容名稱。\nIndex 對照說明 假設撰寫名為 test.py 的 script:\n1 2 3 4 5 6 import sys input_var1 = sys.argv[1] print(\u0026#34;sys index 0 : \u0026#34; + sys.argv[0]) print(\u0026#34;sys index 1 : \u0026#34; + input_var1) 在 linux bash 執行 python script :\n1 python3 test.py apple 注意: sys 會將 script 名稱視為 sys.argv[0] 也就是index 0 不能使用，而外部參數的 index 會從 1 開始\n綜合上述觀念，bash 輸出:\n1 2 sys index 0 : test.py sys index 1 : apple 實例 撰寫名為 test.py 的 script:\n1 2 3 4 5 6 import sys fruit = sys.argv[1] price = sys.argv[2] print(\u0026#34;The price of \u0026#34; + fruit + \u0026#34; is \u0026#34; + price) bash 輸入參數 python3 test.py apple 20 得到\n1 The price of apple is 20 Comments sys 方式多用於測試階段，或是簡單的個人專案上，若需要引入多個參數，或是有協作專案的需求，sys會面臨以下缺點:\nindex 引入很看重順序，參數太多增加錯誤機會 且無法為下一個使用者解釋輸入參數的內容，降低推廣性 接下來要介紹的兩個模組，都是針對不同參數給予特定名稱，並說明參數要求，提高script的實用性。\nargparse 模組 argparse 同屬於 python 內建模組，用於命令列剖析\n引入模組 引入模組後先創建 ArgumentParser 物件以及設定參數\n1 2 import argparse parser = argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None) prog: program 名稱，不指定寫 None，default 會帶入 python script 名稱 usage: 告知使用者說應該怎麼使用 program，default 會帶入 script 名稱加上所有參數 description: 一段文字說明程式功能 epilog: 添加在 --help 訊息後的補充文字\n例子:\n1 2 3 4 5 6 ## 撰寫 test.py import argparse parser = argparse.ArgumentParser(prog = None, usage = None, description = \u0026#39;this is description\u0026#39;, epilog = \u0026#39;this is eliog\u0026#39;) 1 2 3 4 5 6 7 8 9 10 ## 在 bash 輸入 python3 test.py --help 會產生以下內容 usage: test.py [-h] --anno ANNO this is description options: -h, --help show this help message and exit this is eliog 添加參數名稱 1 2 parser.add_argument(\u0026#34;--anno\u0026#34;, required = T, help = \u0026#34;required arguments\u0026#34;) parser.add_argument(\u0026#34;--input\u0026#34;, default =\u0026#34;none\u0026#34;) -a / --anno 為自定義的參數flag，以將參數引入特殊變數內 required 執行script 必須要有的參數，default = False default 當使用者沒給此項參數，則引入預先設定的default值 help 針對參數的說明文字，使用 --help 後會顯示\n將參數後的內容引入變數 以 args.parameter_flag 的形式引入特定參數下的內容\n1 2 args = parser.parse_args() a = str(args.anno) 實例 撰寫名為 test.py 的 script:\n1 2 3 4 5 6 7 8 import argparse parser = argparse.ArgumentParser(description = \u0026#34;print input friut type and their price\u0026#34;) parser.add_argument(\u0026#39;-f\u0026#39;, \u0026#39;--fruit\u0026#39;, required=True, help= \u0026#34;name of fruit\u0026#34;) parser.add_argument(\u0026#39;-p\u0026#39;, \u0026#39;--price\u0026#39;, default = 20, help = \u0026#34;price of item\u0026#34;) args = parser.parse_args() print(\u0026#34;The price of \u0026#34; + args.fruit + \u0026#34; is \u0026#34; + args.price) bash 輸入 python3 test.py --help 查看訊息\n1 2 3 4 5 6 7 8 usage: test.py [-h] -f FRUIT [-p PRICE] print input friut type and their price options: -h, --help show this help message and exit -f FRUIT, --fruit FRUIT name of fruit -p PRICE, --price PRICE price of item bash 輸入參數 python3 test.py --fruit apple --price 20 得到\n1 The price of apple is 20 Comments argparse 模組提升參數引入的複雜性與數量，增加在真實世界的使用機會；但複雜的步驟轉換（建立物件 \u0026gt; add_args \u0026gt; parse_args）讓人頭昏眼花，若能有更簡單的參數設定機制，可以減低程式撰寫的難易度\nclick 套件 click 官網以 creating beautiful command line interfaces 形容套件的核心功能\n下載並引入套件後，只需利用 @click.command 和 @click_option 即可產生和argparse等價的結果\n實例 1 2 3 4 5 6 7 8 9 10 import click @click.command @click.option(\u0026#39;-f\u0026#39;, \u0026#39;--fruit\u0026#39;,\u0026#39;fruit\u0026#39;, required=True, help= \u0026#34;name of fruit\u0026#34;) @click.option(\u0026#39;-p\u0026#39;, \u0026#39;--price\u0026#39;, \u0026#39;price\u0026#39;, default = 20, help = \u0026#34;price of item\u0026#34;) def main(fruit, price): print(\u0026#34;The price of \u0026#34; + fruit + \u0026#34; is \u0026#34; + str(price)) if __name__ == \u0026#39;__main__\u0026#39;: main() bash 輸入參數 python3 test.py --fruit apple --price 20 得到相同console:\n1 The price of apple is 20 Comments 和 argparse 相比 click 語法更加簡潔，許多參數都相容，推薦新手可以直接使用click建立參數指令，但請注意 python 版本相容性，詳細可參考官網說明。\n參考資料 https://docs.python.org/zh-tw/3/library/sys.html#sys.argv https://docs.python.org/zh-tw/3/howto/argparse.html https://click.palletsprojects.com/en/8.1.x/ https://myapollo.com.tw/blog/python-click/\n","date":"2024-02-21T00:00:00Z","image":"https://pxchen110.github.io/post/python-argument-input/20240221_img1.jpg","permalink":"https://pxchen110.github.io/p/python%E7%B3%BB%E5%88%97-%E4%B8%89%E7%A8%AE%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E5%8F%83%E6%95%B8%E7%9A%84%E6%96%B9%E6%B3%95/","title":"Python系列： 三種引入外部參數的方法"},{"content":"Background photo by Brett Jordan on Unsplash\n在信箱收件夾，不乏看到許多自動寄出的信件，像是來自 slurm job 通知分析狀態的信，以及訂閱內容的自動通知等。自動寄信不僅節省人力操作，也可廣發信件增加傳播效率。今天就要介紹如何用python實現自動寄信\nPart1: SMTP協定介紹 通訊協定，是協助資訊在不同軟硬體之間傳輸的方式，例如使用相同IP的兩台電腦，可以突破主機限制互相通訊。網際網路中，常用的通訊協定包含TCP/IP, HTTPS(TLS/SSL加密)，以及本文要使用的SMTP協定。 SMTP全名為簡易郵件傳輸通訊協定 (Simple Mail Transfer Protocol)，是透過網路在電腦與伺服器之間接收與傳送電子郵件的通訊方式。只要知道服務廠商的smtp, port, 並提供一個寄件帳號，就可以自動\\廣發信件給多名收件人。\n常見的廠商與smtp伺服器：\ngmail: smtp.gmail.com outlook: smtp-mail.outlook.com 常見的連接埠比較(內容節錄自cloudflare網站) :\n連接埠 25 最常用於 SMTP 伺服器之間的連線。如今，用於終端使用者網路的防火牆通常會封鎖該連接埠，因為垃圾郵件發送者嘗試濫用它來傳送大量垃圾郵件。\n連接埠 465 曾經專供具有安全通訊端層 (SSL) 加密的 SMTP 使用。但是 SSL 已被 Transport Layer Security (TLS) 取代，因此現代電子郵件系統不再使用該連接埠。它只存在於舊版（過時的）系統中。\n連接埠 587 現在是電子郵件提交的預設連接埠。透過此連接埠進行的 SMTP 通訊使用 TLS 加密。\nPart2: 撰寫python程式 python 提供 smtplib 模組來協助 smtp 封裝信息並傳輸給目標端。由於\nstep0: 引入套件和開啟google mail 權限 1 import smtplib 除了基本模組，常搭配擴充電子郵件標準套件，來處理內文部分\n1 2 from email.mime.multipart import MIMEMultipart #email內容載體 from email.mime.text import MIMEText #製作郵件內文 若要在gmail使用smtplib，需要到 google 帳戶的安全性頁面 完成帳戶密碼設定(下圖紅框標示處)\nstep1: 設定帳戶資訊 1 2 3 4 5 6 7 MAIL_USER = \u0026#34;from_who_user_@gmail...\u0026#34; #寄件者email帳號 MAIL_PASSWD = \u0026#34;......\u0026#34; #寄件者email密碼 FROM_ADDRESS = MAIL_USER #和寄件者相同 # 郵件平台的主機 port (這裡使用 gmail smtp 伺服器) MAIL_SMTP = \u0026#34;smtp.gmail.com\u0026#34; MAIL_PORT = 587 #安全加密port \u0026#34;587\u0026#34; step2: 撰寫郵件內容與寄件人 1 2 to_address = \u0026#34;to_who_@gmail...\u0026#34; #收件者email帳號 body_content = \u0026#34;\u0026#34; #輸入郵件內文 step3: 以擴充電子郵件標準來組合 email 結構 1 2 3 4 5 6 mail = MIMEMultipart() mail[\u0026#39;From\u0026#39;] = FROM_ADDRESS #寄件者 mail[\u0026#39;Subject\u0026#39;] = \u0026#34;the subject\u0026#34; #主旨 mail[\u0026#39;To\u0026#39;] = to_address #收件者 mail.attach(MIMEText(body_content)) #以attach方式貼上內文 step4: 設定smtp伺服器並寄信 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 smtpserver = smtplib.SMTP(MAIL_SMTP, MAIL_PORT) # 發出「Hello」訊息，以在用戶端和伺服器之間建立SMTP連線 smtpserver.ehlo() # TLS加密：延伸保護 SMTP 階段作業 smtpserver.starttls() # 登入寄件人郵件系統 smtpserver.login(MAIL_USER. MAIL_PASSWD) # 將step3產生的信件內容轉成string並寫入 smtpserver.sendmail(FROM_ADDRESS, to_address, mail.as_string()) # 結束系統連線 server.quit() Part3: 完整script \u0026amp; 成果展示 附上完整的 python script 注意: 由於使用個人主機測試，才敢將信箱帳密直接輸入在command line、由 sys 存取，若在公用主機請注意資安考量。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 import os import sys import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText mail_user = sys.argv[1] mail_passwd = sys.argv[2] from_address = mail_user mail_smtp = \u0026#34;smtp.gmail.com\u0026#34; mail_port = 587 to_address = sys.argv[3] body_content = \u0026#34;\u0026#34;\u0026#34; This is the auto-send email test \u0026#34;\u0026#34;\u0026#34; mail = MIMEMultipart() mail[\u0026#39;From\u0026#39;] = mail_user mail[\u0026#39;To\u0026#39;] = to_address mail[\u0026#39;Subject\u0026#39;] = \u0026#34;Test for smtp email-sender\u0026#34; mail.attach(MIMEText(body_content)) server = smtplib.SMTP(mail_smtp, mail_port) server.ehlo() server.starttls() server.login(mail_user, mail_passwd) server.sendmail(mail_user, to_address, mail.as_string()) server.quit() 到收件者的信箱查看，成功收到如下圖的信件\n參考資料 https://aws.amazon.com/tw/what-is/smtp/ https://www.cloudflare.com/zh-tw/learning/email-security/what-is-smtp/\n","date":"2024-02-15T00:00:00Z","image":"https://pxchen110.github.io/post/python-smtplib/20240215_img1.jpg","permalink":"https://pxchen110.github.io/p/python%E7%B3%BB%E5%88%97-smtplib-%E6%A8%A1%E7%B5%84%E5%AF%A6%E7%8F%BE%E8%87%AA%E5%8B%95%E5%AF%84%E4%BF%A1/","title":"Python系列： smtplib 模組實現自動寄信"},{"content":"參考資料來源：udemy 課程\n從上次練習從零創造網頁佈局後，發現自己的技巧和美感都有待進步，決定跟著udemy課程的實作項目:搭建拼多多網站首頁，來學習真實網站有哪些常用的佈局和技巧。\n學習流程：將影片要仿寫的部份截圖-\u0026gt;自己寫看看-\u0026gt;觀看課程影片比對老師和我的作法差異-\u0026gt;改善程式-\u0026gt;完成！\n大致的切版規劃: 切版成三區塊，以及一個固定於網頁左下方的qrcode，在html會分成四個\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;撰寫\nheader+nav(嚴格來說只有navigation bar) body(以相同模板套用內容並垂直排列) footer(下方聯絡資訊等樣式) qrcode banner Header+nav section 切版設計: html元素:\n圖片和nav文字都是 \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; 元素 css樣式重點:\n網頁滑動仍固定於上方: 1 2 3 4 position: fixed; /*固定在最上面*/ top: 0; /*定位*/ left: 0; /*定位*/ z-index: 999; /*滑動時不會被上來的div蓋住*/ nav的div以flex呈現水平排列，以border作為間隔，並清除尾端div的border 1 2 display: flex; /*將div以flex規劃排列方式，呈現清單*/ flex-direction: row; nav 下面的小div以border作為間隔 在倒數個div加上class name(.g-header-list-re)，練習以+方式清除最後一個div元素的border 1 2 3 4 5 border-right: 1px solid gray; .g-header-list-re + div { /*清除最後一個元素的border*/ border-right: none; } body section 切版設計: html元素:\n由於區塊模板相似，做好一個候可以重複套用添加內容 一個區塊以div包覆，下面分三個小div操作 最上div面用 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; 和 \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; 放置文字與連結點選 中間div放大圖片 下方div包含三個小div，放置圖片，文字等商品資訊 css樣式重點:\nbody整體以header做父元素定位，並做水平置中 body寬度以view point為單位設定，使其可依照視窗縮放比例 區塊模板以flex呈垂直排列 1 2 3 4 5 6 7 8 9 10 11 position: absolute; top: 40%; left: 50%; /*搭配margin-left: -(width/2)做水平置中*/ overflow: hidden; display: flex; flex-direction: column; gap: 50px; margin-left: -40vw; /*寬度的一半做水平置中*/ width: 80vw; 區塊模版最上方的\u0026lt;p\u0026gt;和\u0026lt;a\u0026gt; 分別以 float: left; float: right; 浮動 區塊模板下方再套用flex呈水平排列 1 2 3 display: flex; flex-direction: row; gap: 10px; footer section 切版設計: html元素:\n上方div內有兩個小div，分別放置qrcode跟聯絡資訊 下方div跟header的nav清單相似，但以list寫法呈現 css樣式重點:\nfooter整體以body做父元素定位 使用預先知道得body total height作為top距離，讓footer銜接在body下方 1 2 3 4 5 6 position:absolute; top: 3000px; /*不太好得做法，以body為父元素，body height為top距離*/ padding-top: 60px; width:100vw; /*可依視窗大小縮放的寬度單位*/ height:300px; background-color: lightgray; 上方div內的兩個小div以float:left;做浮動 左側div以flex讓內部三個div呈水平排列，同時設定跟右側div相同的高度 右側div主要調整的是p元素的間隔，高寬，以及與左側div的距離，並以border做區隔 1 2 3 4 5 /*左側div css*/ display: flex; /*flex方式排列qrcodes*/ flex-direction: row; gap: 10px; height: 240px; /*讓img+text總高和右側聯絡資訊一樣*/ 1 2 3 4 5 6 7 8 /*右側div css*/ text-align: left; border-left: 1px solid black; margin-left: 15px; margin-bottom: 20px; padding-left: 45px; line-height: 30px; font-size: 20px; 下方div(.g-footer-list)的list以更改display:inline-block;的方式呈水平排列，並保留設定元素寬度的能力 練習以last-child或first-child方式移除頭尾元素的border 1 2 3 4 5 6 .g-footer-list ul li { /*以inline-block displayed list製作清單*/ display: inline-block; /*可設長寬的元素*/ border-left: 1px solid black; margin: 0 auto; /*給予寬度的情況下，margin auto可置中*/ width: 100px; } 1 2 3 .g-footer-list li:first-child { /*remove border for the first element in the list*/ border: none; } qrcode banner html元素:\ndiv包含img和兩個小div css樣式設計:\n整體定位，以網頁為父元素，固定浮動於左下方 設定z-index浮動在body和footer上方 1 2 3 4 5 6 7 position: fixed; /*固定浮動在網頁左下方*/ bottom: 50px; left: 100px; z-index: 998; /*不被body蓋住*/ padding: 10px 30px; border: 1px solid gray; background-color: white; 先設定圖片寬度，配合left和margin-left讓圖片水平置中於div內 1 2 3 4 5 6 img { position: relative; left: 50%; margin-left: -75px; width: 150px; } 成果展示 Github 原始碼 一併附上拚多多網站連結\n檢討回顧 以上就是我得第一版網站仿寫，過程歷經許多trial and error，像是沒規劃好區塊，等寫到60%時又重新修改架構，打掉重練的狀況；也蠻常遇到加了css樣式但卻出不來的困惑。最後列出幾點我在udemy上學到的技巧，以及這一版仿寫有待改進的部分:\nnavigation bar 應該也改成list製作會比較簡單，開太多div來包感覺沒意義 footer出現在尾端的定位方式非robust，和body依賴性太高，萬一body新增內容豈不是要調整top數值? 佔滿視窗大小並依比例調整，改用100%會比100vw好，原因可以參考此網站的解釋 透過將float: left;`` float: right; 設成一個class name，當有元素需要就加上這個class是有效率的方法 同理可以新增清除浮動的class，有需要就加上 1 2 3 4 5 .clearfix::after { /*清除浮動 content: \u0026#34;\u0026#34;; display: block; clear: both; } 一開始就設定所有的a元素都移除下底線，或所有list都移除符號 ","date":"2024-02-11T00:00:00Z","image":"https://pxchen110.github.io/post/html-css-practice2/20240211_img0.png","permalink":"https://pxchen110.github.io/p/html-css%E6%88%90%E6%9E%9C%E5%B1%952%E4%BB%BF%E5%AF%AB%E6%8B%BC%E5%A4%9A%E5%A4%9A%E7%B6%B2%E7%AB%99/","title":"HTML+CSS成果展(2)：仿寫拼多多網站"},{"content":"在udemy上學了html+css的知識，光看不會進步，動手做一遍才知道不熟的地方，我寫一個標題為要來我家看貓嗎的小網頁\n切版架構 可以分成兩大區塊:\nheader section body section header section html元素: 單純地用h1做大標題\ncss樣式設計:\n整體div固定在最上方，並加上z-index讓body上滑不會蓋住它 1 2 3 4 5 6 7 position: fixed; z-index: 2; top: 0; border: 1px solid lightblue; background-color: lightblue; width: 100%; /*fill all broswer*/ height: 50px; body section body部分以 display:flex 排列，並添加 wrapper 讓每行可以依照視窗大小改變容器數量 每個容器包含img,固定寬度200px 加上一些文字描述，和尚未引入javascript的button，其中有添加cursor樣式以及hover的pseudo element 為了讓文字與圖片置中排列於容器內，以position: relative 定位，使用 left: 50%; margin-left:-(img_width/2); 來置中\nhtml元素:\n區塊模板相同，每個div由上到下依序為標題div、圖檔img、文字div、以及按鈕button css樣式設計:\n整體body沒有加定位樣式，因此設margin-top來預防被header遮蓋 對於內部區塊模板，以flex呈現水平排列，並設定flex-wrap來允許視窗大小改變時，div能變成多行排列 1 2 3 4 5 6 7 display: flex; flex-direction: row; flex-wrap: wrap; align-content: flex-start; margin: 50px; margin-top: 200px; /*solving position:fixed covering problem*/ width:auto; 針對區塊模板，給予寬度後設定 margin:auto 來均分左右空間，border調整圓弧形 1 2 3 4 5 margin: auto; /*share left space equally*/ border: 1px solid lightblue; border-radius: 10%; width: 300px; height: 400px; 區塊內部的按鈕，加上鼠標移上去的偽元素樣式 1 2 3 .but-class-name:hover { background-color: lightcoral; } 成果展示 Github 原始碼\n從下兩張圖比對，可以看到當螢幕尺寸改變，每行可容納的div數量也會彈性調整\n","date":"2024-02-08T00:00:00Z","image":"https://pxchen110.github.io/post/html-css-practice1/20240208_img2.png","permalink":"https://pxchen110.github.io/p/html-css%E6%88%90%E6%9E%9C%E5%B1%951%E5%8F%AF%E6%84%9B%E8%B2%93%E5%92%AA%E7%B6%B2%E7%AB%99/","title":"HTML+CSS成果展(1)：可愛貓咪網站"},{"content":"決定撰寫個人部落格後，參考許多網友的平台推薦，最終決定選擇免付費和客製化自由度高的Github，同時練習 markdown語法, git 管理部分。本篇文章記錄我建立網站的步驟和遇到的問題，避坑避雷你我有責。\n本機環境: MacOS Sonoma\nPart1: Github 創建倉庫專案 首先要創建GitHub帳號，Github是提供開發者存放專案、進行版本控制的好平台，大部分開源工具會將source code放在Github提供下載使用 選擇 Create a new repository 建立新專案，以 ${username}.github.io 來命名並以Public形式發表，初始狀態會產生一個空的reposiroty 回到本機端，以 git clone ${repository_url} 將專案載到本機端；完成後會在當前目錄找到和專案同名 ${username}.github.io 的資料夾 注意：由於之後我們會在這個資料夾下新增檔案，並推送回Github(git push)，過程牽涉authorization問題，可以先建立ssh-key 或 token 授權 Part2: 透過 npm 下載 Node.js 函式庫 Hexo 來推送管理Blog 在本機端安裝npm（Node.js的套件管理系統） 不同作業系統的安裝可參考 Node.js社群文件 我選擇透過Macport安裝： 先下載Macport 安裝 Node.js 和 npm 1 2 3 4 5 sudo port install nodejs10 sudo port -d selfupdate sudo port install npm npm -v #測試安裝是否成功 透過 npm 安裝 Hexo 並初始化，完成後會產生名為 blog 的資料夾 1 2 3 4 5 6 #install hexo (sudo) npm install hexo-cli -g # Blog initialization hexo init blog cd blog 將 blog/ 下的所有檔案複製到剛才clone回來的github repository 資料夾下，再執行npm 安裝 hexo 需要的套件 1 2 cp -R * /path/to/${username}.github.io (sudo) npm install 指令完成後將會看到以下檔案和資料夾，介紹我目前有編輯過的部分： _config.yml 是設定網站的配置檔案 theme/ 客製化主題存放的地方 source/_post/ 放置發布文章(.md)的地方 Part3: 編輯 configuration 並推回 Github 設定blog相關內容，keyword 解釋可參考官方文件。我編輯過的部分包含：\n網站標題、作者、網址： deploy 來源：特別注意 push branch，由於 Github 目前 default branch 是 main，config 內要設定 push 到 main branch 才有效，當時我沒注意順手設 master，直接讓文章與主題樣式分離\u0026hellip; repo 就貼上 ssh clone 的網址 儲存檔案後，透過以下指令推送回Github：\n1 2 3 4 hexo clean #清除靜態網頁 hexo generate # == hexo g 透過設定文件產生靜態網頁 hexo server # == hexo s 產生測試機看成果 hexo deployer # == hexo d 將內容部署到git上 注意: 執行 hexo deployer 可能遇到以下錯誤：Deployer not found: git，原因是缺少 hexo-deployer-git 套件\n透過以下指令安裝：\n1 npm install hexo-deployer-git --save 都完成後可以透過以下網址看初始成果：https://${username}.github.io\nPart4: 挑選客製化主題 有了地基就可以蓋房子啦(誤) 除了 github 提供的基本網站樣式，Hexo 網站有很多開源主題 可以下載套用，如果沒頭緒可以看別人推薦 套用主題的方法： git clone 回名為 theme 的資料夾內 到先前編輯過的 _config.yml 加上主題名稱，並依照主題的 documentation 進行操作 1 git clone ${theme_repository_url} /path/to/${username}.github.io/themes/theme_name Part5: 階段成果 我的blog 使用的是 tranquilpeak 主題，第一眼就被簡約有質感的排版吸引 (尤其是sidebar部分)，主題目前支援中文樣式及嵌入搜索引擎，但 documentation 只有英文版\nGithub Link Demo Link 目前做了基礎設定和更改背景，官方文件還有很多功能沒測試，持續摸索～\nPart6: 新增貼文 當要發布文章時，需要以markdown語法撰寫，我推薦使用hackmd 來協助在markdownm語法下完成文章，建立貼文的步驟如下：\n將當前目錄跳轉至_post內並以下方指令產生.md檔和放置圖片的同名資料夾 1 hexo new post_name 編輯 .md檔 將hackmd上的文章複製貼上即可 注意：圖片顯示需要一個確認＋三個步驟，四者缺一不可 確認 _config.yml 設定 post_asset_folder: true npm 透過以下指令安裝圖片顯示套件 (sudo) npm install https://github.com/CodeFalling/hexo-asset-image --save 將圖片放在 /_post/post_name/ 資料夾下，例如我在資料夾下放一張名為 img1.png 的圖檔 若以放在上方資料夾，.md檔內圖片只要打名稱即可，例如我只要打 ![](img1.png) 圖片就可顯示嘍！ 最後以步驟10推送回Github就完成發文了 以上就是我的第一篇文章分享，歡迎一起討論！\n","date":"2024-02-01T00:00:00Z","image":"https://pxchen110.github.io/post/hexo-blog/20240201_img5.png","permalink":"https://pxchen110.github.io/p/%E7%94%A8github-hexo%E5%BB%BA%E7%AB%8B%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC%E6%96%B9%E6%B3%95%E8%88%87%E5%95%8F%E9%A1%8C%E7%B4%80%E9%8C%84/","title":"用Github+Hexo建立個人部落格：方法與問題紀錄"}]